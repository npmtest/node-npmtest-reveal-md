{"/home/travis/build/npmtest/node-npmtest-reveal-md/test.js":"/* istanbul instrument in package npmtest_reveal_md */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reveal-md/lib.npmtest_reveal_md.js":"/* istanbul instrument in package npmtest_reveal_md */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_reveal_md = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_reveal_md = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-reveal-md/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-reveal-md && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_reveal_md */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_reveal_md\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_reveal_md.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_reveal_md.rollup.js'] =\n            local.assetsDict['/assets.npmtest_reveal_md.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_reveal_md.__dirname + '/lib.npmtest_reveal_md.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/bin/cli.js":"#!/usr/bin/env node\n\nconst program = require('commander'),\n  defaults = require('../lib/defaults'),\n  revealMarkdown = require('./../lib'),\n  pkg = require('../package.json');\n\nprogram\n  .version(pkg.version)\n  .usage('<slides.md> [options]')\n  .option('-D, --disable-auto-open', 'Disable auto-opening your web browser', defaults.disableAutoOpen)\n  .option('-H, --highlight-theme <theme>', 'Highlight theme [zenburn]', defaults.highlightTheme)\n  .option('-h, --host <host>', 'Host [localhost]', defaults.host)\n  .option('-i, --scripts <scripts>', 'Scripts to inject into the page', defaults.scripts)\n  .option('-m, --preprocessor <script>', 'Markdown preprocessor script', defaults.preprocessor)\n  .option('-p, --port <port>', 'Port [1948]', defaults.port)\n  .option('-P, --print [filename]', 'Print', defaults.print)\n  .option('-t, --theme <theme>', 'Theme [black]', defaults.theme)\n  .option('-T, --title <title>', 'Title of the presentation', defaults.title)\n  .option('-s, --separator <separator>', 'Slide separator', defaults.separator)\n  .option('-S, --static [dir]', 'Export static html to directory [_static]. Incompatible with --print.', defaults.static)\n  .option('-v, --vertical-separator <separator>', 'Vertical slide separator', defaults.verticalSeparator)\n  .option('-w, --watch', 'Watch for changes in markdown file and livereload presentation [false]', defaults.watch)\n  .parse(process.argv);\n\nif(program.args.length > 2) {\n  program.help();\n}\n\nrevealMarkdown(program);\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/lib/index.js":"'use strict';\nconst path = require('path'),\n  debug = require('debug')('reveal-md'),\n  bluebird = require('bluebird'),\n  parseOptions = require('./options').parseOptions,\n  startServer = require('./serve'),\n  print = require('./print'),\n  renderStaticMarkup = require('./static');\n\nbluebird.promisifyAll(require('fs-extra'));\n\nlet revealOptions = {};\ntry {\n  revealOptions = require(path.join(process.cwd(), 'reveal.json'));\n} catch(err) {\n  debug(err.message);\n}\n\ndebug('revealOptions %O', revealOptions);\n\nmodule.exports = function revealMarkdown(args) {\n\n  args.revealOptions = revealOptions;\n\n  const options = parseOptions(args);\n\n  debug('Parsed options %O', options);\n\n  if(options.static) {\n    renderStaticMarkup(options);\n  } else if(options.print) {\n    print(options);\n  } else {\n    startServer(options);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/lib/options.js":"const fs = require('fs'),\n  path = require('path'),\n  glob = require('glob'),\n  url = require('url'),\n  _ = require('lodash'),\n  defaults = require('./defaults.json');\n\nconst revealBasePath = path.resolve(require.resolve('reveal.js'), '..', '..');\nconst highlightThemePath = path.resolve(require.resolve('highlight.js'), '..', '..', 'styles');\nconst templatePath = path.join(__dirname, 'template', 'reveal.html');\nconst templateListingPath = path.join(__dirname, 'template', 'listing.html');\nconst template = fs.readFileSync(templatePath).toString();\nconst templateListing = fs.readFileSync(templateListingPath).toString();\n\nconst revealThemes = glob.sync('css/theme/*.css', {cwd: revealBasePath});\nconst localThemes = glob.sync('theme/*.css', {cwd: process.cwd()});\nconst availableThemes = revealThemes.concat(localThemes);\n\nfunction parsePath(pathArg, baseDir) {\n  const opts = {};\n  if(pathArg === 'demo') {\n    opts.basePath = path.join(__dirname, '..', 'demo');\n  } else if(pathArg) {\n    const filePath = path.join(baseDir || process.cwd(), pathArg);\n    if(fs.existsSync(filePath)) {\n      const stat = fs.statSync(filePath);\n      if(stat.isFile()) {\n        opts.basePath = path.dirname(filePath);\n        opts.baseName = path.basename(filePath);\n        opts.relativePath = path.relative(process.cwd(), filePath);\n      } else if(stat.isDirectory()) {\n        opts.baseDir = filePath;\n      }\n    } else {\n      const parsedUrl = url.parse(pathArg);\n      if(parsedUrl.host) {\n        opts.url = parsedUrl.href;\n      } else {\n        opts.basePath = process.cwd();\n      }\n    }\n  }\n  return opts;\n}\n\nfunction getThemeUrl(options) {\n  const parsedUrl = typeof options.themePath === 'string' && url.parse(options.themePath);\n  if(parsedUrl.host) {\n    return parsedUrl.href;\n  } else {\n    return `${options.base()}/${options.themePath}`;\n  }\n}\n\nfunction parseThemeArg(theme) {\n  const parsedUrl = url.parse(theme);\n  if(parsedUrl.host) {\n    return theme;\n  } else {\n    return availableThemes.find(themePath => path.basename(themePath).replace(path.extname(themePath), '') === theme);\n  }\n}\n\nfunction parseScriptsArg(scripts) {\n  return (typeof scripts === 'string' ? scripts.split(',') : []).map(script => path.join('scripts', script));\n}\n\nfunction parseScriptsPath(scripts) {\n  return (typeof scripts === 'string' ? scripts.split(',') : []).map(script => ({\n    path: path.resolve(process.cwd(), script),\n    name: script\n  }));\n}\n\nfunction parsePreprocessorArg(preprocessor) {\n  return preprocessor ? require(path.join(process.cwd(), preprocessor)) : _.identity;\n}\n\nconst optionList = [\n  'disableAutoOpen',\n  'highlightTheme',\n  'host',\n  'port',\n  'print',\n  'preprocessor',\n  'revealOptions',\n  'scripts',\n  'separator',\n  'static',\n  'theme',\n  'title',\n  'verticalSeparator',\n  'watch'\n];\n\nfunction parseOptions(args) {\n\n  const options = _.pick(args, optionList);\n\n  if(_.has(args, 'args.0')) _.extend(options, parsePath(args.args[0]));\n\n  options.themePath = parseThemeArg(args.theme || defaults.theme);\n  options.scriptPaths = parseScriptsArg(args.scripts);\n  options.scriptSources = parseScriptsPath(args.scripts);\n  options.title = args.title || defaults.title;\n  options.separator = args.separator || defaults.separator;\n  options.verticalSeparator = args.verticalSeparator || defaults.verticalSeparator;\n  options.highlightTheme = args.highlightTheme || defaults.highlightTheme;\n  options.preprocessorFn = parsePreprocessorArg(args.preprocessor);\n\n  options.revealBasePath = revealBasePath;\n  options.highlightThemePath = highlightThemePath;\n\n  options.base = () => options.host && options.port && !options.static ? `//${options.host}:${options.port}` : '.';\n  options.template = () => template;\n  options.templateListing = () => templateListing;\n  options.themeUrl = () => getThemeUrl(options);\n  options.highlightThemeUrl = () => `${options.base()}/css/highlight/${options.highlightTheme}.css`;\n  options.revealOptionsStr = () => JSON.stringify(options.revealOptions || defaults.revealOptions);\n\n  return options;\n}\n\nmodule.exports = {\n  parsePath,\n  parseOptions\n};\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/lib/serve.js":"'use strict';\nconst path = require('path'),\n  debug = require('debug')('reveal-md'),\n  express = require('express'),\n  _ = require('lodash'),\n  liveReload = require('livereload'),\n  open = require('open'),\n  render = require('./render'),\n  parsePath = require('./options').parsePath;\n\nconst staticDir = express.static;\n\nlet initialOptions;\n\nfunction updatePathOptions(req, res, next) {\n  const pathOpts = parsePath(req.url, initialOptions.baseDir);\n  res.locals.options = _.extend({}, initialOptions, pathOpts);\n  debug('Update path options to %O', pathOpts);\n  next();\n}\n\nfunction getScript(req, res) {\n  res.sendFile(path.resolve(process.cwd(), req.url.replace(/^\\/scripts\\//, '')));\n}\n\nmodule.exports = function startServer(options, cb) {\n\n  initialOptions = options;\n\n  const app = express();\n\n  ['css', 'js', 'plugin', 'lib'].forEach(dir => {\n    app.use('/' + dir, staticDir(path.join(options.revealBasePath, dir)));\n  });\n\n  app.use(`/css/highlight`, staticDir(options.highlightThemePath));\n\n  if(options.watch) {\n    const liveReloadServer = liveReload.createServer({\n      exts: ['md']\n    });\n    liveReloadServer.watch(process.cwd());\n  }\n\n  app.get('/', updatePathOptions, render.renderMarkdownFileListing);\n  app.get(/(\\w+\\.md)$/, updatePathOptions, render.renderMarkdownAsSlides);\n  app.get('/scripts/*', getScript);\n  app.get('/*', staticDir(process.cwd()));\n\n  const server = app.listen(options.port);\n\n  const host = `http://${options.host}:${options.port}`;\n  const link = options.relativePath || options.url;\n  const url = `${host}${link ? '/' + link : ''}`;\n\n  if(!options.print) {\n    /* eslint-disable no-console */\n    console.log(`Reveal-server started at ${host}`);\n    if(!options.disableAutoOpen) {\n      open(url);\n    }\n  }\n\n  if(cb) cb(server);\n\n};\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/lib/render.js":"const fs = require('fs-extra'),\n  debug = require('debug')('reveal-md'),\n  Mustache = require('mustache'),\n  got = require('got'),\n  glob = require('glob'),\n  yamlFrontMatter = require('yaml-front-matter'),\n  md = require('reveal.js/plugin/markdown/markdown'),\n  _ = require('lodash'),\n  parseOptions = require('./options').parseOptions;\n\nfunction parseYamlFrontMatter(content) {\n  const document = yamlFrontMatter.loadFront(content);\n  return {\n    options: _.omit(document, '__content'),\n    markdown: document.__content || content\n  };\n}\n\nfunction getSlidifyOptions(options) {\n  return _.pick(options, [\n    'attributes',\n    'notesSeparator',\n    'separator',\n    'verticalSeparator'\n  ]);\n}\n\nfunction parseSlides(markdown, options) {\n  const yaml = parseYamlFrontMatter(markdown);\n  const view = parseOptions(_.merge({}, options, yaml.options));\n  const slidifyOptions = getSlidifyOptions(view);\n  const processedMarkdown = view.preprocessorFn(yaml.markdown, view);\n  return {\n    view,\n    slides: md.slidify(processedMarkdown, slidifyOptions)\n  };\n}\n\nfunction render(markdown, options) {\n\n  const slides = parseSlides(markdown, options);\n\n  const view = _.extend(slides.view, {\n    slides: slides.slides,\n    scripts: slides.view.scripts\n  });\n\n  debug(`Rendering ${options.relativePath} with %O from %O`, view, markdown);\n\n  return Mustache.to_html(view.template(), view);\n}\n\nfunction renderMarkdownAsSlides(req, res) {\n\n  const options = res.locals.options;\n\n  const readMarkdown = options.url\n    ? got(options.url).then(response => response.body)\n    : fs.readFileAsync(options.relativePath).then(markdown => markdown.toString());\n\n  readMarkdown.then(markdown => render(markdown, options)).then(markup => res.send(markup));\n}\n\nfunction renderMarkdownFileListing(req, res) {\n\n  const options = res.locals.options;\n  const list = glob.sync('**/*.md', {\n    cwd: options.baseDir,\n    ignore: 'node_modules/**'\n  }).map(filePath => `<a href=\"${filePath}\">${filePath}</a>`);\n\n  const markup = Mustache.to_html(options.templateListing(), {\n    themeUrl: options.themeUrl,\n    title: options.title,\n    listing: list.join('<br>')\n  });\n\n  res.send(markup);\n}\n\nmodule.exports = {\n  render,\n  renderMarkdownAsSlides,\n  renderMarkdownFileListing,\n  parseSlides\n};\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/lib/print.js":"const path = require('path'),\n  _ = require('lodash'),\n  startServer = require('./serve'),\n  exec = require('child_process').exec;\n\nmodule.exports = function print(options) {\n\n  const printPluginPath = path.join(options.revealBasePath, 'plugin', 'print-pdf', 'print-pdf.js');\n\n  const opts = _.extend({}, options, {\n    disableAutoOpen: true\n  });\n\n  startServer(opts, function(server) {\n\n    /* eslint-disable no-console */\n\n    const url = `http://${options.host}:${options.port}/${options.relativePath}`;\n    const pdfFilename = options.print === true ? options.baseName.replace(/\\.md$/, '') : options.print.replace(/\\.pdf$/, '');\n\n    console.log(`Attempting to print \"${options.relativePath}\" to filename \"${pdfFilename}.pdf\" as PDF.`);\n    console.log('Make sure to have PhantomJS installed (and in your path).');\n\n    exec(`phantomjs ${printPluginPath} ${url}?print-pdf ${pdfFilename}.pdf`, function(err, stdout, stderr) {\n      if(err) {\n        console.error(`[Error while generating PDF for \"${options.relativePath}\"]\\n${stderr}\\n${err.toString()}`);\n      } else {\n        console.log(stdout);\n      }\n      server.close();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/lib/static.js":"const fs = require('fs-extra'),\n  path = require('path'),\n  render = require('./render').render,\n  _ = require('lodash');\n\nmodule.exports = function renderStaticMarkup(options) {\n\n  /* eslint-disable no-console */\n\n  const staticPath = options.static === true ? '_static' : options.static;\n  const targetPath = path.resolve(process.cwd(), staticPath);\n\n  const awaits = ['css', 'js', 'plugin', 'lib'].map(dir => fs.copyAsync(path.join(options.revealBasePath, dir), path.join(targetPath, dir)));\n\n  const markupAwait = fs.readFileAsync(options.relativePath)\n    .then(markdown => render(markdown.toString(), options))\n    .then(markdown => fs.outputFileAsync(path.join(targetPath, 'index.html'), markdown));\n\n  const highlightAwait = fs.copyAsync(options.highlightThemePath, path.join(targetPath, 'css', 'highlight'));\n\n  awaits.push(markupAwait);\n  awaits.push(highlightAwait);\n\n  if(!_.isEmpty(options.scripts)) {\n    const scriptsDir = path.join(targetPath, 'scripts');\n    fs.ensureDirSync(scriptsDir);\n    const scriptAwaits = options.scriptSources.map(scriptFile => fs.copyAsync(scriptFile.path, path.join(scriptsDir, scriptFile.name)));\n    awaits.concat(scriptAwaits);\n  }\n\n  Promise.all(awaits).then(() => console.log(`Wrote static site to ${targetPath}`)).catch(console.error);\n\n};\n","/home/travis/build/npmtest/node-npmtest-reveal-md/node_modules/reveal-md/myscript.js":"console.log(1)\n"}